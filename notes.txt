Use json dict: key is hash of video file
{
    "filename" : {
        hash: whatever,
        "tags": [...],
        "rating": 10,
        playcount: 1,
        skipcount: 0,
        date: timestamp,
        duration: 100,  # seconds
        lastplayed: timestamp,
        counts: [1, 1, 1, 0, 0, 0],
        *
    },
    ...
}

*: potentially also
list of counts, one count for each second of the video
(so can plot histogram of sections viewed)

https://stackoverflow.com/a/30460687/5013267
also encrypt with zip command line
play by rating

to count as playcount: duration spent on video >= max(5, video_length)

when importing: dialogue with list of videos imported
buttons down the bottom like ImageTagger. Pressing any of the buttons will advance down the list
also with preview video area (just like ImageTagger)

playing:
qtablewidget
bar along bottom where you can add tags
search bar to filter by tag

Sorting: can just be done through QTableWidget header clicking thing (allows for both descending and ascending sort)
but allow user to select which headers to display using Menu bar

Todo: work on importing files + filesystem (w/ encryption/zipping)

todo sometime: add way to remove libraries through GUI too

next time: maybe overthrow the whole _cur_library thing in LibraryManager in favour of just disposing old library yourself in windows.py
-> reduce complexity
impl: creating new libraries from GUI


Bug: currently, saving the zipfile will actually store a duplicate of the files written to it using zipfile.writestr
due to a limitation with zipfile itself (bruh) https://bugs.python.org/issue2824
so every time the zipfile was saved, its file would only grow. Bad.
Need to rebuild zip file each time -- alter library.save()